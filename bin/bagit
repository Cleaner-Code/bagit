#!/usr/bin/env ruby

require 'bagit'
require 'docopt'

doc = <<DOCOPT
BagIt.

Usage: 
  #{__FILE__} [-f <file>...] [-t <tagfile>...] PATH
  #{__FILE__} --delete [-f <file>...] [-t <tagfile>...] PATH
  #{__FILE__} --remove [-t <tagfile>...] PATH
  #{__FILE__} --validate [-o] PATH 
  #{__FILE__} --manifest [-T] PATH 
  #{__FILE__} --list [--tags | --all] PATH 
  #{__FILE__} -h | --version

Options:
  -h --help      Show this help screen.
  --version      Show version.
  -f <file>      File to add to/delete from bag. Repeatable.
  -t <tag_file>  Tag (metadata) file to add to/delete/remove from bag. Repeatable.
  --manifest     Force generation/update of manifest files.
  --T            Force regeneration of tag manifest files.
  -o --oxum      Validate against oxum only (quick validate).
  --tags         List tag files.
  --all          List all data and tag files.

DOCOPT

begin
  opts = Docopt::docopt(doc, version: 'BagIt 0.3.0')
  
  bag = BagIt::Bag.new(opts['PATH'])

  if opts['--validate']
    if opts['--oxum']
      puts bag.valid_oxum?.to_s
    else
      puts bag.valid?.to_s
    end
    # validation commands MUST NOT change manifest or bag-info files
    exit
  end

  if opts['--list']
    files = bag.bag_files
    if opts['--tags']
      files = bag.tag_files
    elsif opts['--all']
      files = bag.bag_files + bag.tag_files
    end
    files.each { |f| puts f }
    # quit here, too
    exit
  end

  #TODO: implement delete for data and tag files; remove for tag files.

  unless opts['-f'].nil? 
    opts['-f'].each { |datafile|
      begin
        bag.add_file(File.basename(datafile), datafile)
      rescue Exception => e
        puts "Failed to add bag file: #{e.message}"
      end
    }  
  end
    
  unless opts['-t'].nil? 
    opts['-t'].each { |tagfile|
      begin
        bag.add_tag_file(File.basename(tagfile), tagfile)
      rescue Exception => e
        puts "Failed to add tag file: #{e.message}"
      end
    }
  end

  bag.tagmanifest! if opts['-T'] or not opts['-t'].nil?
  bag.manifest!

rescue Docopt::Exit => e
  puts e.message
end

